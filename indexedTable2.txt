IndexedTable<E extends Object|Array>

struct:
  id: NodeId uint = 2
  
  nodes: {[NodeId]: Node {
    id: NodeId
    value: E
    prev?: Node
    next?: Node
  }}
  size: uint = 0
  head: DummyNode {id: 0, next: tail}
  tail: DummyNode {id: 1, prev: head}
  cachedArray?: Node[] = null

  indexes: {[indexName: IndexName str]: {[key]: str}: Index {[NodeId]: Node}}

  config: {
    indexes: {[IndexName]: (str|number)[]}
  }

trait:
  constuctor(#config?)
  $deepCopy(obj: E): E

  append(prevNode, value): Node
  insert(nextNode, value): Node
  remove(node): E? = oldValue
  update(node, value): E? = oldValue
  swap(node1, node2): bool
  moveUp(node): bool
  moveDown(node): bool
  getIndexedNode(indexName, value): Node
  listIndexedNodes(indexName, value): Node[]
  getNode(nodeId): Node
  headNode()
  tailNode()
  clear()
  size()
  isEmpty()
  forEach(fn: (Node, this) => bool, thisArg?)
  toArray(): Node[]
  #nextId()

  addIndex(indexName, columns): this
  dropIndex(indexName): this
  #getIndex(indexName, value): Index
  #setIndex(indexName, node)
  #clearIndex(indexName, node)
  #setIndexes(node)
  #clearIndexes(node)

// # private -> internal_
// $ static
// _ member field
